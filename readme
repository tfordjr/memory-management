// CS4760-001SS - Terry Ford Jr. - Project 5 Resource Management - 03/29/2024
// https://github.com/tfordjr/resource-management.git

This 5th version of the OSS project now implements simulated system resources that
child processes must share. These children must share resources and will avoid deadlocks
dynamically as they occur. 

---Compile and run instructions:
simply run make command and oss command in the following format:
./oss -n 40 -s 8 -t 3 -i 250 -f my_logfile.txt
-n processes, -s simultaneous processes, -t max runtime, -i launch interval(ms), -f logfile
use the -h arg to learn more about how to use these commands.
Args default to appropriate figures if not provided, can be in any order.

---Features: 
oss.cpp: processes args and managles child forking, msgq, pcb, logical clock, etc.
user.cpp: user executable takes one arg for number of iterations. prints and sleeps. 
pcb.h: contains pcb struct and many related functions for process table utility.
clock.h: logical clock struct, include add_time() and subtract_time()
msgq.h: houses msgbuffer struct, running states
rng.h: holds generate_random_number() to be used in user.cpp and oss.cpp
memclean.sh: cleans up lingering memory on make clean command
makefile: creates oss and user executables, oss executes user executable to perform work.
readme: explains project


---Lack of adhearance to specifications:

---Known Problems or Bugs: 
attempting to send messages within attempt_process_unblock(), trying to get that working.
right now, the msgsnd is broken

if launch interval is greater than 0, waitpid() returns -1 bc no processes are in the system
temp fix: -i 0 allows first process to launch before waitpid() first runs
and waitpid() returns 0 as a child process is in the system at that point. 
In previous projects, waitpid() returns 0 even though there are no child procs, not sure why

seems like at large scale (./oss -n 100 -s 15), the procs are populating the resource queue
and not coming out very often. I don't believe this constitutes a deadlock but there is certainly a resource shortage that is slowing or stopping proper system function.