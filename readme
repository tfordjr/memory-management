CS4760-001SS - Terry Ford Jr. - Project 4 OSS Scheduler - 03/08/2024
https://github.com/tfordjr/oss-scheduler.git

This 4th version of the OSS project now implements the 'naieve' multilevel feedback queue,
which is the simplest implementation. There is no preemption or aging, but we are
simulating io blocking, and we have three queues which will determine the scheduling. 

---Compile and run instructions:
simply run make command and oss command in the following format:
./oss -n 40 -s 8 -t 3 -i 250 -f my_logfile.txt
-n processes, -s simultaneous processes, -t max runtime, -i launch interval(ms), -f logfile
use the -h arg to learn more about how to use these commands.
Args default to appropriate figures if not provided, can be in any order.

---Features: 
oss.cpp: processes args and managles child forking, msgq, pcb, logical clock, etc.
user.cpp: user executable takes one arg for number of iterations. prints and sleeps. 
pcb.h: contains pcb struct and many related functions for process table utility.
clock.h: logical clock struct, include add_time() and subtract_time()
msgq.h: houses msgbuffer struct, running states
rng.h: holds generate_random_number() to be used in user.cpp and oss.cpp
memclean.sh: cleans up lingering memory on make clean command
makefile: creates oss and user executables, oss executes user executable to perform work.
readme: explains project


---Lack of adhearance to specifications:
Instead of sending a "-" on the time slice used to convey blocked or unblocked,
    In my project the time slice never has "-" symbol and that info is in the msgCode var.

---Known Problems or Bugs: 
