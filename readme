// CS4760-001SS - Terry Ford Jr. - Project 6 Memory Management - 04/21/2024
// https://github.com/tfordjr/memory-management.git

This 5th version of the OSS project now implements simulated system resources that
child processes must share. These children must share resources and will avoid deadlocks
dynamically as they occur. 

---Compile and run instructions:
simply run make command and oss command in the following format:
./oss -n 40 -s 8 -t 3 -i 250 -f my_logfile.txt
-n processes, -s simultaneous processes, -t max runtime, -i launch interval(ms), -f logfile
use the -h arg to learn more about how to use these commands.
Args default to appropriate figures if not provided, can be in any order.

---Features: 
oss.cpp: processes args and managles child forking, msgq, pcb, logical clock, etc.
user.cpp: user executable takes one arg for number of iterations. prints and sleeps. 
pcb.h: contains pcb struct and many related functions for process table utility.
memory.h contains Page struct and memory queue and related functions
clock.h: logical clock struct, include add_time() and subtract_time()
msgq.h: houses msgbuffer struct, running states
rng.h: holds generate_random_number() to be used in user.cpp and oss.cpp
memclean.sh: cleans up lingering memory on make clean command
makefile: creates oss and user executables, oss executes user executable to perform work.
readme: explains project


---Lack of adhearance to specifications:

---Known Problems or Bugs: 
my when I call shmctl() in cleanup(), it produces a fatal bug. I have no idea why this 
began in this project but this same code had no issues in my prior projects.
I've removed that line so the bug isn't present, but it leaves that memory in the system.

