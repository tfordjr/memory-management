CS4760-001SS - Terry Ford Jr. - Project 4 OSS Scheduler - 03/08/2024
https://github.com/tfordjr/oss-scheduler.git

This 4th version of the OSS project now implements the 'naieve' multilevel feedback queue,
which is the simplest implementation. There is no preemption or aging, but we are
simulating io blocking, and we have three queues which will determine the scheduling. 

Compile and run instructions:
simply run make command and oss command in the following format:
./oss -n 40 -s 8 -t 3 -i 250 -f my_logfile.txt
-n processes, -s simultaneous processes, -t max runtime, -i launch interval(ms), -f logfile
use the -h arg to learn more about how to use these commands.
Args default to appropriate figures if not provided, can be in any order.

Features: 
oss.cpp: processes args and managles child forking, msgq, pcb, logical clock, etc.
user.cpp: user executable takes one arg for number of iterations. prints and sleeps. 
pcb.h: contains pcb struct and many related functions for process table utility.
clock.h: logical clock struct.
msgq.h houses msgbuffer struct, running states
makefile: creates oss and user executables, oss executes user executable to perform work.
memclean.sh: cleans up lingering memory on make clean command
readme: explains project

Concerns/Points of confusion: 

Known Problems or Bugs: 
when user.cpp determines random amount of time slice to use before terminating or IO block,
    it's possible that we choose an amount of time that is over the TermTime of the process
    The only time we check term time is if we do not IO block or randomly terminate
Also, user.cpp does not actually check if it terms naturally during runtime
